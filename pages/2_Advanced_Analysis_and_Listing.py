# frontend/pages/2_Advanced_Analysis_and_Listing.py
import streamlit as st
import requests
import base64
from io import BytesIO
from PIL import Image
from dotenv import load_dotenv
import os

load_dotenv()
BASE_URL = os.getenv("BASE_URL", "http://localhost:8080")

st.set_page_config(page_title="An√°lisis Avanzado", layout="wide")

def load_css(file_name):
    try:
        with open(file_name) as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    except:
        pass

load_css("./assets/style.css")

if "access_token" not in st.session_state or not st.session_state["access_token"]:
    st.warning("Necesitas iniciar sesi√≥n para acceder a esta p√°gina.")
    st.stop()

token = st.session_state["access_token"]
username_state = st.session_state["logged_in_user"]

st.title("üîç An√°lisis Avanzado")

# Small ABCDE guidance
with st.expander("¬øQu√© es la regla ABCDE?", expanded=False):
    st.markdown("""
    **A - Asimetr√≠a**: Lesiones que no sean uniformes en forma.<br>
    **B - Borde**: Bordes irregulares, dentados o mal definidos.<br>
    **C - Color**: Varias tonalidades, incluyendo marr√≥n, negro, rojo, azul o blanco.<br>
    **D - Di√°metro**: Mayor de 6 mm.<br>
    **E - Evoluci√≥n**: Cambios en el tiempo (tama√±o, forma, color, elevaci√≥n o s√≠ntomas).<br>
    """, unsafe_allow_html=True)

st.subheader("Iniciar An√°lisis Avanzado de Respaldo")

col1, col2 = st.columns(2)

with col1:
    adv_username = st.text_input(
        "Nombre de usuario para An√°lisis Avanzado",
        value=username_state,
        help="Por defecto tu propio usuario; si eres admin, podr√≠as analizar otro usuario"
    )

with col2:
    body_part_options = [
        "Brazo izquierdo",
        "Brazo derecho",
        "T√≥rax",
        "Espalda",
        "Pierna izquierda",
        "Pierna derecha",
        "Cuello",
        "Cabeza/Cara",
        "Otra",
        "No especificar"
    ]
    selected_body_part_filter = st.selectbox(
        "Parte del cuerpo (opcional)",
        options=body_part_options,
        index=len(body_part_options)-1
    )

    body_part_filter = ""
    if selected_body_part_filter == "Otra":
        custom_part = st.text_input("Describe la parte del cuerpo")
        body_part_filter = custom_part if custom_part else ""
    elif selected_body_part_filter != "No especificar":
        body_part_filter = selected_body_part_filter

if st.button("üõ†Ô∏è Iniciar An√°lisis Avanzado"):
    if not adv_username:
        st.warning("‚ö†Ô∏è Se requiere el nombre de usuario para el an√°lisis avanzado.")
    else:
        payload = {"username": adv_username}
        if body_part_filter:
            payload["body_part"] = body_part_filter

        with st.spinner("Realizando an√°lisis avanzado..."):
            try:
                headers = {"Authorization": f"Bearer {token}"}
                adv_resp = requests.post(
                    f"{BASE_URL}/start_process", 
                    json=payload, 
                    headers=headers,
                    timeout=60
                )

                if adv_resp.status_code == 200:
                    adv_data = adv_resp.json()
                    st.success("‚úÖ ¬°An√°lisis avanzado completado!")

                    overall_recommendation = adv_data.get("overall_recommendation", "No hay recomendaci√≥n disponible.")
                    st.markdown(f"**Recomendaci√≥n General**: `{overall_recommendation}`")

                    st.markdown("### An√°lisis Detallado")
                    analysis_list = adv_data.get("analysis", [])

                    for analysis in analysis_list:
                        image_id = analysis.get("image_id", "N/A")
                        with st.expander(f"üìÑ An√°lisis para ID de Imagen: {image_id}", expanded=False):
                            st.markdown(f"**Asimetr√≠a**: {analysis.get('asymmetry', '')}")
                            st.markdown(f"**Irregularidad del Borde**: {analysis.get('border_irregularity', '')}")
                            st.markdown(f"**Variegaci√≥n del Color**: {analysis.get('color_variegation', '')}")
                            st.markdown(f"**Evaluaci√≥n del Di√°metro**: {analysis.get('diameter_assessment', '')}")
                            st.markdown(f"**Evaluaci√≥n de la Evoluci√≥n**: {analysis.get('evolution_assessment', '')}")
                            st.markdown(f"**An√°lisis de segmentaci√≥n**: {analysis.get('segmentation_analysis', '')}")
                            st.markdown(f"**Informaci√≥n Extra**: {analysis.get('extra_info_influence', '')}")
                            st.markdown(f"**Comentarios T√©cnicos**: {analysis.get('image_technical_commentaries', '')}")
                            st.markdown(f"**Otros Diagn√≥sticos**: {analysis.get('other_diagnoses', '')}")
                            st.markdown(f"**Decisi√≥n Final**: `{analysis.get('final_decision', '')}`")
                            st.markdown(f"**Nivel de Confianza**: `{analysis.get('confidence_level', '')}`")

                            # Attempt to fetch segmented image
                            try:
                                r_img = requests.get(f"{BASE_URL}/get_segmented_image/{image_id}", headers=headers, timeout=30)
                                if r_img.status_code == 200:
                                    image_data = r_img.json()
                                    seg_b64 = image_data.get("segmented_image_b64")
                                    if seg_b64:
                                        seg_img = Image.open(BytesIO(base64.b64decode(seg_b64)))
                                        st.image(seg_img, caption=f"Imagen Segmentada {image_id}")
                                    else:
                                        st.info("No se encontr√≥ la imagen segmentada.")
                                else:
                                    st.error(f"Error {r_img.status_code} al obtener imagen segmentada")
                            except requests.RequestException as e:
                                st.error(f"Error al obtener la imagen segmentada: {e}")

                else:
                    st.error(f"‚ùå Error {adv_resp.status_code}: {adv_resp.text}")

            except requests.RequestException as e:
                st.error(f"‚ùå Error al conectar con el servidor: {e}")

st.markdown("---")

st.info("Si deseas ver todas tus im√°genes y resultados, revisa la p√°gina de Historial.")
